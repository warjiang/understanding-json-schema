.. index::
   single: regular expressions

.. _regular-expressions:

Regular Expressions
===================

.. contents:: :local:

The :ref:`pattern <pattern>` and `patternProperties` 字段使用正则表达式来描述约束. 
正则语法可以参考 JavaScript 中正则语法 (`ECMA 262
<http://www.ecma-international.org/publications/standards/Ecma-262.htm>`__). 
但是并不会支持正则中的全部语法, 目前推荐使用如下列出的正则语法的子集.

- 除了特殊字符外, 单个 unicode 字符能与自身匹配.

- ``.``: 匹配除了换行符意外的所有字符.(需要注意换行符与平台、语言环境有关).

- ``^``: 匹配字符串的开头.

- ``$``: 匹配字符串结尾.

- ``(...)``: 将一串正则表达式分组称一个正则表达式.

- ``|``: 匹配 ``|`` 之前或之后的任意字符.

- ``[abc]``: 匹配方括号内的任意字符.

- ``[a-z]``: 匹配范围内的字符.

- ``[^abc]``: 匹配 *非* 方括号内的字符.

- ``[^a-z]``: 匹配非范围内的字符.

- ``+``: 匹配前面一个或多个正则表达式.

- ``*``: 匹配前面零个或多个正则表达式.

- ``?``: 匹配前面零个或一个正则表达式.

- ``+?``, ``*?``, ``??``:  ``*``, ``+`` 和 ``?`` 限定词都是贪婪匹配的。会尽可能尽可能多的文本. 有时候这种行为是不符合预期的, 可能希望匹配的字符越少越好.
  
- ``(?!x)``, ``(?=x)``: 先行断言, 后行断言.

- ``{x}``: 精确匹配前面  ``x`` 遍正则表达式.

- ``{x,y}``: 匹配前面至少 ``x`` 且至多 ``y`` 遍正则表达式.

- ``{x,}``: 匹配前面至少出现 ``x`` 遍正则表达式.

- ``{x}?``, ``{x,y}?``, ``{x,}?``: 上述表达式的惰性版本.

Example
'''''''

如下示例表示匹配带可选区号的北美电话号码:

.. schema_example::

   {
      "type": "string",
      "pattern": "^(\\([0-9]{3}\\))?[0-9]{3}-[0-9]{4}$"
   }
   --
   "555-1212"
   --
   "(888)555-1212"
   --X
   "(888)555-1212 ext. 532"
   --X
   "(800)FLOWERS"
